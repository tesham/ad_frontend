{"ast":null,"code":"import axios from \"axios\";\nimport { refreshAccessToken } from \"../services/login\";\nconst axiosInstance = axios.create({\n  baseURL: \"http://127.0.0.1:8000/api/\"\n  // other configurations\n});\naxiosInstance.interceptors.request.use(function (config) {\n  // Do something before request is sent\n  var token = localStorage.getItem(\"ip-tokens-access\");\n  if (token) {\n    config.headers.Authorization = \"Bearer \" + token;\n  }\n  ////\n\n  return config;\n}, function (error) {\n  // Do something with request error\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(response => {\n  return response;\n}, async function (error) {\n  const originalRequest = error.config;\n  if (error.response.status === 403 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    const {\n      data\n    } = await refreshAccessToken();\n    axios.defaults.headers.common[\"Authorization\"] = \"Bearer \" + data.access;\n    return axiosInstance(originalRequest);\n  }\n  localStorage.setItem(\"ip-tokens-access\", data.access);\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","refreshAccessToken","axiosInstance","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","originalRequest","status","_retry","data","defaults","common","access","setItem"],"sources":["/Users/technical/AD_AUS/code/ip-management/src/network/apiConfig.js"],"sourcesContent":["import axios from \"axios\";\nimport { refreshAccessToken } from \"../services/login\";\n\nconst axiosInstance = axios.create({\n  baseURL: \"http://127.0.0.1:8000/api/\",\n  // other configurations\n});\n\naxiosInstance.interceptors.request.use(\n  function (config) {\n    // Do something before request is sent\n    var token = localStorage.getItem(\"ip-tokens-access\");\n\n    if (token) {\n      config.headers.Authorization = \"Bearer \" + token;\n    }\n    ////\n\n    return config;\n  },\n  function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  }\n);\n\naxiosInstance.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  async function (error) {\n    const originalRequest = error.config;\n    if (error.response.status === 403 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      const { data } = await refreshAccessToken();\n      axios.defaults.headers.common[\"Authorization\"] = \"Bearer \" + data.access;\n      return axiosInstance(originalRequest);\n    }\n    localStorage.setItem(\"ip-tokens-access\", data.access);\n    return Promise.reject(error);\n  }\n);\n\nexport default axiosInstance;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,kBAAkB,QAAQ,mBAAmB;AAEtD,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC;EACjCC,OAAO,EAAE;EACT;AACF,CAAC,CAAC;AAEFF,aAAa,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACpC,UAAUC,MAAM,EAAE;EAChB;EACA,IAAIC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC;EAEpD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,SAAS,GAAGJ,KAAK;EAClD;EACA;;EAEA,OAAOD,MAAM;AACf,CAAC,EACD,UAAUM,KAAK,EAAE;EACf;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAEDZ,aAAa,CAACG,YAAY,CAACY,QAAQ,CAACV,GAAG,CACpCU,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACD,gBAAgBH,KAAK,EAAE;EACrB,MAAMI,eAAe,GAAGJ,KAAK,CAACN,MAAM;EACpC,IAAIM,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC5DF,eAAe,CAACE,MAAM,GAAG,IAAI;IAC7B,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMpB,kBAAkB,CAAC,CAAC;IAC3CD,KAAK,CAACsB,QAAQ,CAACV,OAAO,CAACW,MAAM,CAAC,eAAe,CAAC,GAAG,SAAS,GAAGF,IAAI,CAACG,MAAM;IACxE,OAAOtB,aAAa,CAACgB,eAAe,CAAC;EACvC;EACAR,YAAY,CAACe,OAAO,CAAC,kBAAkB,EAAEJ,IAAI,CAACG,MAAM,CAAC;EACrD,OAAOT,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeZ,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}